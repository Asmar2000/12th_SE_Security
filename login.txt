the SQL query is defined using a prepared statement ($stmt = $mysqli->prepare("SELECT * FROM user WHERE email = ?");) and the user-supplied data ($_POST["email"]) is bound to the statement using $stmt->bind_param("s", $_POST["email"]);. The s parameter in bind_param indicates that the user-supplied data is a string.

This way, even if an attacker tries to inject SQL code into the $_POST["email"] parameter, it will be treated as a string and not as SQL code.

Additionally, it's important to always sanitize user input using htmlspecialchars when it's displayed in the HTML, as shown in the original code. This prevents cross-site scripting (XSS) attacks.


old php code:

<?php

$is_invalid = false;

if ($_SERVER["REQUEST_METHOD"] === "POST") {
    
    $mysqli = require __DIR__ . "/database.php";
    
    $sql = sprintf("SELECT * FROM user WHERE email = '%s'", $mysqli->real_escape_string($_POST["email"]));
    
    $result = $mysqli->query($sql);
    
    $user = $result->fetch_assoc();
    
    if ($user) {
        
        if (password_verify($_POST["password"], $user["password_hash"])) {
            
            session_start();
            
            session_regenerate_id();
            
            $_SESSION["user_id"] = $user["id"];
            
            header("Location: index.php");
            exit;
        }
    }
    
    $is_invalid = true;
}

?>